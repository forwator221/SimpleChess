//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""2825a818-ac63-4e7e-a699-040f2a9f6d0f"",
            ""actions"": [
                {
                    ""name"": ""SingleTouch"",
                    ""type"": ""Value"",
                    ""id"": ""e88eadd5-59cb-4a5b-8ce9-b9f2b5da6ea7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoubleTouch"",
                    ""type"": ""Value"",
                    ""id"": ""8a8b92dc-86ab-4666-b8b1-9c4188cad04f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoubleTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""d4f8e527-f13a-4e4b-85e9-f221c510b1bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SingleTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""34f40db5-ca0b-4502-9ce5-058e0bc37721"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f754dc24-1d5b-4921-bd9c-f099e1b1bfb3"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02919c89-1b9e-4a77-8931-03f0c825daa2"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""587e2dd6-c28a-4644-b414-d4dceaec8552"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""186f13e9-bf0b-435e-8592-dbbb89a2134f"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_SingleTouch = m_Touch.FindAction("SingleTouch", throwIfNotFound: true);
        m_Touch_DoubleTouch = m_Touch.FindAction("DoubleTouch", throwIfNotFound: true);
        m_Touch_DoubleTouchContact = m_Touch.FindAction("DoubleTouchContact", throwIfNotFound: true);
        m_Touch_SingleTouchContact = m_Touch.FindAction("SingleTouchContact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_SingleTouch;
    private readonly InputAction m_Touch_DoubleTouch;
    private readonly InputAction m_Touch_DoubleTouchContact;
    private readonly InputAction m_Touch_SingleTouchContact;
    public struct TouchActions
    {
        private @TouchInput m_Wrapper;
        public TouchActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SingleTouch => m_Wrapper.m_Touch_SingleTouch;
        public InputAction @DoubleTouch => m_Wrapper.m_Touch_DoubleTouch;
        public InputAction @DoubleTouchContact => m_Wrapper.m_Touch_DoubleTouchContact;
        public InputAction @SingleTouchContact => m_Wrapper.m_Touch_SingleTouchContact;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @SingleTouch.started += instance.OnSingleTouch;
            @SingleTouch.performed += instance.OnSingleTouch;
            @SingleTouch.canceled += instance.OnSingleTouch;
            @DoubleTouch.started += instance.OnDoubleTouch;
            @DoubleTouch.performed += instance.OnDoubleTouch;
            @DoubleTouch.canceled += instance.OnDoubleTouch;
            @DoubleTouchContact.started += instance.OnDoubleTouchContact;
            @DoubleTouchContact.performed += instance.OnDoubleTouchContact;
            @DoubleTouchContact.canceled += instance.OnDoubleTouchContact;
            @SingleTouchContact.started += instance.OnSingleTouchContact;
            @SingleTouchContact.performed += instance.OnSingleTouchContact;
            @SingleTouchContact.canceled += instance.OnSingleTouchContact;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @SingleTouch.started -= instance.OnSingleTouch;
            @SingleTouch.performed -= instance.OnSingleTouch;
            @SingleTouch.canceled -= instance.OnSingleTouch;
            @DoubleTouch.started -= instance.OnDoubleTouch;
            @DoubleTouch.performed -= instance.OnDoubleTouch;
            @DoubleTouch.canceled -= instance.OnDoubleTouch;
            @DoubleTouchContact.started -= instance.OnDoubleTouchContact;
            @DoubleTouchContact.performed -= instance.OnDoubleTouchContact;
            @DoubleTouchContact.canceled -= instance.OnDoubleTouchContact;
            @SingleTouchContact.started -= instance.OnSingleTouchContact;
            @SingleTouchContact.performed -= instance.OnSingleTouchContact;
            @SingleTouchContact.canceled -= instance.OnSingleTouchContact;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnSingleTouch(InputAction.CallbackContext context);
        void OnDoubleTouch(InputAction.CallbackContext context);
        void OnDoubleTouchContact(InputAction.CallbackContext context);
        void OnSingleTouchContact(InputAction.CallbackContext context);
    }
}
